<h4>Geopandas</h4>

On my machines running macOS, I have Python 3 installed via Homebrew.  For the mini, it is in ``/usr/local/bin``, while on my new Macbook it is in ``/opt/homebrew/bin``.

It seems that these python installations are best used in a virtual environment.  I just ``cd`` into a convenient directory and do

/opt/homebrew/bin/python3.13 -m venv maps

I like working on the desktop so from ~/Desktop do

source ~/Programming/maps/bin/activate

or make an alias in ~.zshrc and then

pip install --upgrade pip
python -m pip install matplotlib
python -m pip install geopandas
python -m pip install jupyterlab

The correct python will be called simply as ``python``.

<h4>Geopandas</h4>

Pandas is a popular Python module for working with dataframes.  

A dataframe is a table.  For example, one might have rows of individual amino acids, and columns with various things like molecular weight, hydrophobicity, and so on.

A GeoDataFrame (variable ``gdf``) is a dataframe that contains, among other things, coordinates for geographical objects like polygons and line strings, which can represent state boundaries and rivers.  Geopandas is a popular Python module for this kind of data.

import matplotlib.pyplot as plt
import geopandas as gpd

We start with a geodataframe containg points along the boundary for selected US states in the Pacific Northwest.

dbpath = '/Users/telliott/Library/CloudStorage/Dropbox/data/'
fn = 'OR_WA_ID_MT_WY.shp.zip'
gdf = gpd.read_file(dbpath + fn)

The 'NAME' column contains the names of states. The 'STATE' column contains the FIPS code for each.

gdf.columns

gdf['NAME']

gdf['STATE','NAME']

The 'geometry' column contains objects representing the state outlines as POLYGON or MULTIPOLYGON objects.  Washington is a MULTIPOLYGON because it includes a number of islands.

This dataframe has already been filtered from a larger one containing all 50 US states plus DC and Puerto Rico.  Let's start by loading the larger one and showing how to obtain what we have above.

fn = 'gz_2010_us_040_00_5m.zip
gdf = gpd.read_file(dbpath + fn')
gdf.shape

There are 52 entries as rows, and each with 6 columns of attributes.  The states we want to select are:  OR, WA, ID, MT, WY.  There are several ways to do it.

<h4>isin</h4>

L = ['Oregon','Washington','Idaho','Montana','Wyoming']
sel = gdf['NAME'].isin(L)
sub = gdf[sel]
sub.shape

The ``sel`` variable is a series of boolean values.

sel.iloc[12:14]

``iloc`` is a Pandas way of indexing by a numerical index.  It is distinguished from ``loc``, which uses labels.

<h4>``apply``</h4>

You can supply either a named function or a lambda expression.

sel = gdf['NAME'].apply(lambda r: r in L)
sub = gdf[sel]
print(gdf.shape, sub.shape)

A third way is to construct a series of logical expressions.

OR = gdf['NAME'] == 'Oregon'
WA = gdf['NAME'] == 'Washington'
ID = gdf['NAME'] == 'Idaho'
MT = gdf['NAME'] == 'Montana'
WY = gdf['NAME'] == 'Wyoming'
sub = gdf[OR | WA | ID | MT | WY]
print(gdf.shape, sub.shape)

Since we have ``matplotlib``, let's plot the data.

states = sub
states.boundary.plot()
plt.show()

To save the plot in a file

ofn = 'example.png'
plt.savefig(ofn,dpi=300)

It would be nice to have some labels. Let's add a column to the data with the two letter abbreviations.

sub = states.assign(abbrev = ['OR','WA','ID','MT','WY'])
print(states['abbrev'])

def f(e):
    return e..representative_point().coords[:][0]

The ``[0]`` at the end is because the coordinates are like ``[(x,y)]``.

states['coords'] = states['geometry'].apply(f)

states['coords']

One can use ``iterrows`` to iterate through the data.  We adjust the position of the label for Idaho.

for i,r in states.iterrows():
    x,y = r['ccords']
    if row['NAME'] == 'Idaho':
        y -= 1
    plt.annotate(text=row['name'],xy=(x,y))

plot.show()

Let's add a river.

fn = 'nw_rivers.shp.zip'
nw_rivers = gpd.read_file(dbpath + fn)

First we have to match the coordinate representation system (CRS).

states.crs
nw_rivers.crs
mycrs = nw_rivers.crs

states.to_crs(mycrs)

def sel(s):
    return nw_rivers['NameEn'].str.contains(s)

Snake = nw_rivers[sel('Snake')]
Snake = Snake[Snake['NameEn'] != 'Snake Creek']

ax = states.boundary.plot(figsize=(9, 9),color='blue')
states.plot(ax=ax,color='b',alpha=0.1)
Snake.plot(ax=ax,color='magenta')
plt.show()


